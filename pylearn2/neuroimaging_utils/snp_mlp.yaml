!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.neuroimaging_utils.SNP.MultiChromosome {
        which_set: 'train',
        start: 0,
        stop: %(train_stop)i,
        chromosomes: &chromosomes 22,
        read_only: True,
    },
    model: !obj:pylearn2.neuroimaging_utils.SNP.MultimodalMLP {
        dataset: *train,
        layers: [ !obj:pylearn2.neuroimaging_utils.SNP.MultiChromosomeLayer {
                     num_layers: *chromosomes,
                     layer_to_copy: !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: %(dim_h0)i,
                     irange: 0.05,
                     }
                 },  !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h1',
                     dim: %(dim_h1)i,
                     irange: 0.05,
#                     sparse_init: 10
                 }, !obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: %(n_classes)i,
                     irange: 0.
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i,
        learning_rate: .0001,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.neuroimaging_utils.SNP.MultiChromosome {
                              which_set: 'valid',
                              start: %(train_stop)i,
                              stop: %(valid_stop)i,
                              chromosomes: *chromosomes,
                              read_only: True
                          },
                'test' : !obj:pylearn2.neuroimaging_utils.SNP.MultiChromosome {
                              which_set: 'test',
                              chromosomes: *chromosomes,
                          },
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.mlp.Default {
            },
#            !obj:pylearn2.costs.mlp.WeightDecay {
#                coeffs: [ .00005, .00005, .00005 ]
#            }
            ]
        },
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
#                !obj:pylearn2.termination_criteria.MonitorBased {
#                    channel_name: "valid_y_misclass",
#                    prop_decrease: 0.,
#                    N: %(n_classes)i
#                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                }
            ]
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)s/snp_mlp_best.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}
