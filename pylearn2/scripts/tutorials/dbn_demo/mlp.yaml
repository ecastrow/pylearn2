!obj:pylearn2.train.Train {
    dataset: &data !obj:pylearn2.datasets.binarizer.Binarizer {
        # We use the "raw" tag to specify the underlying dataset defining
        # the sampling probabilities should be MNIST.
        raw: &raw_train !obj:pylearn2.datasets.mnist.MNIST {
            which_set: "train",
            one_hot: 1,
            start: 0,
            stop: %(train_stop)i
        }
    },
    model: !obj:pylearn2.models.dbn.mlp_from_dbn {
        model: !pkl: %(pretrain)s,
        top_layer: !obj:pylearn2.models.mlp.Softmax {
            layer_name: 'y',
            n_classes: %(detector_layer_dim)i,
            irange: 0.
        }
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: %(batch_size)i,
        learning_rate: .01,
        monitoring_batches: %(monitoring_batches)i,
        monitoring_dataset:
            {
                'train' : *data,
                'valid' : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'train',
                              one_hot: 1,
                              start: %(train_stop)i,
                              stop: 60000
                          },
                'test'  : !obj:pylearn2.datasets.mnist.MNIST {
                              which_set: 'test',
                              one_hot: 1,
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.mlp.Default {
            }
            ]
        },
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: .5
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: %(max_epochs)i
                }
            ]
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "%(save_path)s/mlp.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}
